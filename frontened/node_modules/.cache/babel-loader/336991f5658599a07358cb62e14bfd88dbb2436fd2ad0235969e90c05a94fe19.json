{"ast":null,"code":"import { getFocusMerge } from './focusMerge';\nexport var focusOn = function (target, focusOptions) {\n  if ('focus' in target) {\n    target.focus(focusOptions);\n  }\n  if ('contentWindow' in target && target.contentWindow) {\n    target.contentWindow.focus();\n  }\n};\nvar guardCount = 0;\nvar lockDisabled = false;\n/**\r\n * Sets focus at a given node. The last focused element will help to determine which element(first or last) should be focused.\r\n * HTML markers (see {@link import('./constants').FOCUS_AUTO} constants) can control autofocus\r\n * @param topNode\r\n * @param lastNode\r\n * @param options\r\n */\nexport var setFocus = function (topNode, lastNode, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var focusable = getFocusMerge(topNode, lastNode);\n  if (lockDisabled) {\n    return;\n  }\n  if (focusable) {\n    if (guardCount > 2) {\n      // tslint:disable-next-line:no-console\n      console.error('FocusLock: focus-fighting detected. Only one focus management system could be active. ' + 'See https://github.com/theKashey/focus-lock/#focus-fighting');\n      lockDisabled = true;\n      setTimeout(function () {\n        lockDisabled = false;\n      }, 1);\n      return;\n    }\n    guardCount++;\n    focusOn(focusable.node, options.focusOptions);\n    guardCount--;\n  }\n};","map":{"version":3,"names":["getFocusMerge","focusOn","target","focusOptions","focus","contentWindow","guardCount","lockDisabled","setFocus","topNode","lastNode","options","focusable","console","error","setTimeout","node"],"sources":["C:/Users/kushk_uzwykp1/OneDrive/Desktop/spotify_Node/MyFolder/fullRozarPay/frontened/node_modules/focus-lock/dist/es2015/setFocus.js"],"sourcesContent":["import { getFocusMerge } from './focusMerge';\r\nexport var focusOn = function (target, focusOptions) {\r\n    if ('focus' in target) {\r\n        target.focus(focusOptions);\r\n    }\r\n    if ('contentWindow' in target && target.contentWindow) {\r\n        target.contentWindow.focus();\r\n    }\r\n};\r\nvar guardCount = 0;\r\nvar lockDisabled = false;\r\n/**\r\n * Sets focus at a given node. The last focused element will help to determine which element(first or last) should be focused.\r\n * HTML markers (see {@link import('./constants').FOCUS_AUTO} constants) can control autofocus\r\n * @param topNode\r\n * @param lastNode\r\n * @param options\r\n */\r\nexport var setFocus = function (topNode, lastNode, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var focusable = getFocusMerge(topNode, lastNode);\r\n    if (lockDisabled) {\r\n        return;\r\n    }\r\n    if (focusable) {\r\n        if (guardCount > 2) {\r\n            // tslint:disable-next-line:no-console\r\n            console.error('FocusLock: focus-fighting detected. Only one focus management system could be active. ' +\r\n                'See https://github.com/theKashey/focus-lock/#focus-fighting');\r\n            lockDisabled = true;\r\n            setTimeout(function () {\r\n                lockDisabled = false;\r\n            }, 1);\r\n            return;\r\n        }\r\n        guardCount++;\r\n        focusOn(focusable.node, options.focusOptions);\r\n        guardCount--;\r\n    }\r\n};\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,OAAO,IAAIC,OAAO,GAAG,SAAAA,CAAUC,MAAM,EAAEC,YAAY,EAAE;EACjD,IAAI,OAAO,IAAID,MAAM,EAAE;IACnBA,MAAM,CAACE,KAAK,CAACD,YAAY,CAAC;EAC9B;EACA,IAAI,eAAe,IAAID,MAAM,IAAIA,MAAM,CAACG,aAAa,EAAE;IACnDH,MAAM,CAACG,aAAa,CAACD,KAAK,EAAE;EAChC;AACJ,CAAC;AACD,IAAIE,UAAU,GAAG,CAAC;AAClB,IAAIC,YAAY,GAAG,KAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,QAAQ,GAAG,SAAAA,CAAUC,OAAO,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EACxD,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC,IAAIC,SAAS,GAAGZ,aAAa,CAACS,OAAO,EAAEC,QAAQ,CAAC;EAChD,IAAIH,YAAY,EAAE;IACd;EACJ;EACA,IAAIK,SAAS,EAAE;IACX,IAAIN,UAAU,GAAG,CAAC,EAAE;MAChB;MACAO,OAAO,CAACC,KAAK,CAAC,wFAAwF,GAClG,6DAA6D,CAAC;MAClEP,YAAY,GAAG,IAAI;MACnBQ,UAAU,CAAC,YAAY;QACnBR,YAAY,GAAG,KAAK;MACxB,CAAC,EAAE,CAAC,CAAC;MACL;IACJ;IACAD,UAAU,EAAE;IACZL,OAAO,CAACW,SAAS,CAACI,IAAI,EAAEL,OAAO,CAACR,YAAY,CAAC;IAC7CG,UAAU,EAAE;EAChB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}